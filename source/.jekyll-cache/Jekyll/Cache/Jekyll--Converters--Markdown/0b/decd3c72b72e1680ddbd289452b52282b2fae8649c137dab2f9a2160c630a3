I"à<p>BlitzMax supports the following types of loop:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">For...Next</code></li>
  <li><code class="language-plaintext highlighter-rouge">While...Wend</code></li>
  <li><code class="language-plaintext highlighter-rouge">Repeat...Until</code></li>
</ul>

<h2 id="summary">Summary</h2>

<p>The different types of loops are almost identical in performance.</p>

<p><code class="language-plaintext highlighter-rouge">Repeat...Until</code> loops are slightly faster, but itâ€™s unlikely to be a huge
benefit to rewrite everything. Itâ€™s far more effective to optimize whatever is
being called inside the loop.</p>

<p>One slight performance boost was to use a <code class="language-plaintext highlighter-rouge">&lt;&gt;</code> check when using while loops,
rather than a <code class="language-plaintext highlighter-rouge">&lt;</code> check. For example:</p>

<pre><code class="language-blitzmax">While x &lt; 10
    ' Code here
Wend

While x &lt;&gt; 10
    ' Code here
Wend
</code></pre>

<p>The second loop will be slightly faster.</p>

<h2 id="loop-calculations">Loop calculations</h2>

<p>One important difference between the three types of loop is how limits are
checked when using a function.</p>

<p>For example:</p>

<pre><code class="language-blitzmax">' Will print "Called" once.
Print "For...Next"
For Local i:Int = 0 to getNumber()
Next

' Will print "Called" 5 times.
Print "While...Wend"
Local w:Int = 0
While w &lt; getNumber()
    w :+ 1
Wend

Function getNumber:Int()
    Print "Called"
    
    Return 5
End Function
</code></pre>

<p>The <code class="language-plaintext highlighter-rouge">For...Next</code> loop will only execute <code class="language-plaintext highlighter-rouge">getNumber</code> once. However, the
<code class="language-plaintext highlighter-rouge">While...Wend</code> loop will call it every loop iteration. The number should be
stored in a variable unless it must be recalculated every loop.</p>

<h2 id="loop-benchmarks">Loop benchmarks</h2>

<p>All benchmarks are in release mode with threading enabled. 1,000,000,000
iterations.</p>

<table class="table--striped table--fancy table--benchmark">
  <thead>
    <tr>
      <th>Check Type</th>
      <th>Execution Time (milliseconds)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Forâ€¦Next</td>
      <td>3043</td>
    </tr>
    <tr>
      <td>Whileâ€¦Wend</td>
      <td>3034</td>
    </tr>
    <tr>
      <td>Whileâ€¦Wend (Not Equal)</td>
      <td>2766</td>
    </tr>
    <tr>
      <td>Repeatâ€¦Until</td>
      <td>2730</td>
    </tr>
  </tbody>
</table>

<h2 id="test-code">Test code</h2>

<pre><code class="language-blitzmax">SuperStrict

Framework brl.basic

Const ITERATIONS:Int = 1000000000

Local startTime:Int

' For/Next
startTime = millisecs()
For local i:int = 0 to ITERATIONS
	DoSomething(i)
Next
print "For/Next: " + (millisecs() - startTime) 


' While/Wend
startTime = millisecs()
Local whilePos:int = 0
While whilePos &lt; ITERATIONS
	DoSomething(whilePos)
	whilePos:+ 1
Wend
print "While/Wend: " + (millisecs() - startTime) 


' While/Wend (Not Equal check)
startTime = millisecs()
whilePos = 0
While whilePos &lt;&gt; ITERATIONS
	DoSomething(whilePos)
	whilePos:+ 1
Wend
print "While/Wend (NE): " + (millisecs() - startTime) 


' Repeat/Until
startTime = millisecs()
Local repeatPos:int = 0
Repeat
	DoSomething(repeatPos)
	repeatPos:+ 1
Until repeatPos = ITERATIONS
print "Repeat/Until: " + (millisecs() - startTime)

Function DoSomething(arg1:Int)
End Function
</code></pre>
:ET